openapi: 3.0.3
info:
  title: WASAText
  description: |-
    This OpenAPI document describes multiple APIs.

    Student: Damir Tassybayev

    Matricola: 2046612

    E-mail: tassybayev.2046612@studenti.uniroma1.it
  version: "1.0.1"
tags:
  - name: login
    description: Operations related to user login
  - name: user
    description: Operations related to user management
  - name: conversation
    description: Operations related to conversations
  - name: message
    description: Operations related to messages
  - name: comment
    description: Operations related to comments
  - name: group
    description: Operations related to groups

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the user to log in
                  example: Maria
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    description: The identifier of the logged-in user
                    example: "abcdef012345"

  /users/me:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's information
      operationId: setMyUserName
      security:
        - BearerAuth: []
      requestBody:
        description: New user information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New username
                  example: "NewName"
                  minLength: 3
                  maxLength: 16
      responses:
        '204':
          description: Username updated successfully

  /conversations:
    get:
      tags: ["conversation"]
      summary: Retrieves the list of conversations for the authenticated user
      operationId: getMyConversations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'

  /conversations/{conversationId}:
    get:
      tags: ["conversation"]
      summary: Retrieves details of a specific conversation
      operationId: getConversation
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation
          schema:
            type: string
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetails'

  /conversations/{conversationId}/messages:
    post:
      tags: ["message"]
      summary: Sends a message in a conversation
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation
          schema:
            type: string
      requestBody:
        description: Message content
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: The content of the message
                  example: "Hello, world!"
                  minLength: 1
                  maxLength: 1000
                forwardedMessageId:
                  type: string
                  description: ID of the message being forwarded (if any)
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /messages/{messageId}/comments:
    post:
      tags: ["comment"]
      summary: Adds a comment to a message
      operationId: commentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to comment on
          schema:
            type: string
      requestBody:
        description: Comment content
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: The content of the comment
                  example: "Nice post!"
                  minLength: 1
                  maxLength: 500
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /messages/{messageId}/comments/{commentId}:
    delete:
      tags: ["comment"]
      summary: Removes a comment from a message
      operationId: uncommentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          description: ID of the comment to delete
          schema:
            type: string
      responses:
        '204':
          description: Comment deleted successfully

  /messages/{messageId}:
    delete:
      tags: ["message"]
      summary: Deletes a message
      operationId: deleteMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to delete
          schema:
            type: string
      responses:
        '204':
          description: Message deleted successfully

  /groups/{groupId}/members:
    post:
      tags: ["group"]
      summary: Adds a user to a group
      operationId: addToGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
      requestBody:
        description: User to add to the group
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: ID of the user to add
      responses:
        '201':
          description: User added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'

  /groups/{groupId}/members/me:
    delete:
      tags: ["group"]
      summary: Removes the authenticated user from a group
      operationId: leaveGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
      responses:
        '204':
          description: Left group successfully

  /groups/{groupId}:
    put:
      tags: ["group"]
      summary: Updates the group's information
      operationId: setGroupName
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
      requestBody:
        description: New group information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the group
                  example: "New Group Name"
                  minLength: 3
                  maxLength: 50
      responses:
        '204':
          description: Group updated successfully

  /users/me/photo:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's photo
      operationId: setMyPhoto
      security:
        - BearerAuth: []
      requestBody:
        description: New photo
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Photo updated successfully

  /groups/{groupId}/photo:
    put:
      tags: ["group"]
      summary: Updates the group's photo
      operationId: setGroupPhoto
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
      requestBody:
        description: New photo
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Group photo updated successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Conversation:
      type: object
      description: A conversation between users
      properties:
        id:
          type: string
          description: Unique identifier of the conversation
          example: "conv123"
        name:
          type: string
          description: Name of the conversation
          example: "Group Chat"
          minLength: 1
          maxLength: 50
        members:
          type: array
          description: List of user IDs participating in the conversation
          items:
            type: string
            description: User ID
            example: "user123"
          minItems: 1
        lastMessage:
          $ref: '#/components/schemas/Message'
    ConversationDetails:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            messages:
              type: array
              description: List of messages in the conversation
              items:
                $ref: '#/components/schemas/Message'
              minItems: 0
    Message:
      type: object
      description: A message sent in a conversation
      properties:
        id:
          type: string
          description: Unique identifier of the message
          example: "msg123"
        senderId:
          type: string
          description: ID of the user who sent the message
          example: "user456"
        content:
          type: string
          description: Content of the message
          example: "Hello, world!"
          minLength: 1
          maxLength: 1000
        timestamp:
          type: string
          format: date-time
          description: When the message was sent
        forwardedFromId:
          type: string
          description: ID of the original message if this is a forwarded message
          example: "msg789"
    Comment:
      type: object
      description: A comment on a message
      properties:
        id:
          type: string
          description: Unique identifier of the comment
          example: "cmt123"
        authorId:
          type: string
          description: ID of the user who wrote the comment
          example: "user789"
        content:
          type: string
          description: Content of the comment
          example: "Nice post!"
          minLength: 1
          maxLength: 500
        timestamp:
          type: string
          format: date-time
          description: When the comment was made
    GroupMember:
      type: object
      description: A member of a group
      properties:
        userId:
          type: string
          description: ID of the user
          example: "user123"
        joinedAt:
          type: string
          format: date-time
          description: When the user joined the group
