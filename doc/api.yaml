openapi: 3.0.3
info:
  title: WASAText
  description: |-
    This OpenAPI document describes APIs for the project 'WASAText'.

    Student: Damir Tassybayev

    Matricola: 2046612

    E-mail: tassybayev.2046612@studenti.uniroma1.it
  version: "1.0.2"

tags:
  - name: login
    description: Operations related to user login
  - name: user
    description: Operations related to user management
  - name: conversation
    description: Operations related to conversations
  - name: message
    description: Operations related to messages
  - name: comment
    description: Operations related to comments
  - name: group
    description: Operations related to groups

security:
  - BearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                identifier: "abcdef012345"

  /users/me:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's information
      description: Updates the user's username
      operationId: setMyUserName
      security:
        - BearerAuth: []
      requestBody:
        description: New user information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "user123"
                name: "NewName"

  /conversations:
    get:
      tags: ["conversation"]
      summary: Retrieves the list of conversations for the authenticated user
      description: Retrieves conversations
      operationId: getMyConversations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetailsCollection'
              example:
                conversations:
                  - id: "conv123"
                    name: "Group Chat"
                    members: ["user123", "user456"]
                    lastMessage:
                      id: "msg789"
                      senderId: "user456"
                      content: "Hello!"
                      timestamp: "2023-10-20T10:00:00Z"

  /conversations/{conversationId}:
    get:
      tags: ["conversation"]
      summary: Retrieves details of a specific conversation
      description: Retrieves conversation details
      operationId: getConversation
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetails'
              example:
                id: "conv123"
                name: "Group Chat"
                members: ["user123", "user456"]
                messages:
                  - id: "msg789"
                    senderId: "user456"
                    content: "Hello!"
                    timestamp: "2023-10-20T10:00:00Z"

  /conversations/{conversationId}/messages:
    post:
      tags: ["message"]
      summary: Sends a message in a conversation
      description: Sends a message
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      requestBody:
        description: Message content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                id: "msg123"
                senderId: "user123"
                content: "Hello, world!"
                timestamp: "2023-10-20T10:05:00Z"

  /messages/{messageId}/comments:
    post:
      tags: ["comment"]
      summary: Adds a comment to a message
      description: Adds a comment
      operationId: commentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to comment on
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      requestBody:
        description: Comment content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example:
                id: "cmt123"
                authorId: "user789"
                content: "Nice post!"
                timestamp: "2023-10-20T10:10:00Z"

  /messages/{messageId}/comments/{commentId}:
    delete:
      tags: ["comment"]
      summary: Removes a comment from a message
      description: Deletes a comment
      operationId: uncommentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
        - name: commentId
          in: path
          required: true
          description: ID of the comment to delete
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      responses:
        '204':
          description: Comment deleted successfully

  /messages/{messageId}:
    delete:
      tags: ["message"]
      summary: Deletes a message
      description: Deletes a message
      operationId: deleteMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to delete
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      responses:
        '204':
          description: Message deleted successfully

  /groups/{groupId}/members:
    post:
      tags: ["group"]
      summary: Adds a user to a group
      description: Adds a user to a group
      operationId: addToGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      requestBody:
        description: User to add to the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupMemberRequest'
      responses:
        '201':
          description: User added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
              example:
                userId: "user789"
                joinedAt: "2023-10-20T11:00:00Z"

  /groups/{groupId}/members/me:
    delete:
      tags: ["group"]
      summary: Removes the authenticated user from a group
      description: Leaves a group
      operationId: leaveGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      responses:
        '204':
          description: Left group successfully

  /groups/{groupId}:
    put:
      tags: ["group"]
      summary: Updates the group's information
      description: Updates group information
      operationId: setGroupName
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      requestBody:
        description: New group information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              example:
                id: "group123"
                name: "New Group Name"

  /users/me/photo:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's photo
      description: Updates user's photo
      operationId: setMyPhoto
      security:
        - BearerAuth: []
      requestBody:
        description: New photo
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
              description: PNG image file
              minLength: 1
              maxLength: 10485760  # 10 MB
          image/jpeg:
            schema:
              type: string
              format: binary
              description: JPEG image file
              minLength: 1
              maxLength: 10485760  # 10 MB
      responses:
        '200':
          description: Photo updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Confirmation message for photo update
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating successful photo update
                    example: "Photo updated successfully"
                    pattern: '^.*$'
                    minLength: 1
                    maxLength: 100
              example:
                message: "Photo updated successfully"

  /groups/{groupId}/photo:
    put:
      tags: ["group"]
      summary: Updates the group's photo
      description: Updates group's photo
      operationId: setGroupPhoto
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the group
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
      requestBody:
        description: New photo
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
              description: PNG image file
              minLength: 1
              maxLength: 10485760  # 10 MB
          image/jpeg:
            schema:
              type: string
              format: binary
              description: JPEG image file
              minLength: 1
              maxLength: 10485760  # 10 MB
      responses:
        '200':
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                description: Confirmation message for group photo update
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating successful group photo update
                    example: "Group photo updated successfully"
                    pattern: '^.*$'
                    minLength: 1
                    maxLength: 100
              example:
                message: "Group photo updated successfully"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the user to log in
          example: "Maria"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_]+$'
      description: Request schema for user login

    LoginResponse:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the logged-in user
          example: "abcdef012345"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
      description: Response schema for user login

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: New username
          example: "NewName"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_]+$'
      description: Request schema for updating user information

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user
          example: "user123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        name:
          type: string
          description: Name of the user
          example: "Maria"
          minLength: 3
          maxLength: 16
          pattern: '^[a-zA-Z0-9_]+$'
      description: User schema

    ConversationDetailsCollection:
      type: object
      required:
        - conversations
      description: Response schema for list of conversations
      properties:
        conversations:
          type: array
          description: List of conversations
          minItems: 0
          maxItems: 1000
          items:
            $ref: '#/components/schemas/ConversationDetailsSummary'

    ConversationDetailsSummary:
      type: object
      description: A summary of a conversation between users
      required:
        - id
        - name
        - members
      properties:
        id:
          type: string
          description: Unique identifier of the conversation
          example: "conv123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        name:
          type: string
          description: Name of the conversation
          example: "Group Chat"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_ ]+$'
        members:
          type: array
          description: List of user IDs participating in the conversation
          items:
            type: string
            description: User ID
            example: "user123"
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
          minItems: 1
          maxItems: 100
        lastMessage:
          $ref: '#/components/schemas/Message'

    ConversationDetails:
      type: object
      description: Detailed conversation schema
      allOf:
        - $ref: '#/components/schemas/ConversationDetailsSummary'
      required:
        - messages
      properties:
        messages:
          type: array
          description: List of messages in the conversation
          items:
            $ref: '#/components/schemas/Message'
          minItems: 0
          maxItems: 1000

    Message:
      type: object
      description: A message sent in a conversation
      properties:
        id:
          type: string
          description: Unique identifier of the message
          example: "msg123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        senderId:
          type: string
          description: ID of the user who sent the message
          example: "user456"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        content:
          type: string
          description: Content of the message
          example: "Hello, world!"
          minLength: 1
          maxLength: 1000
          pattern: '^.*$'
        timestamp:
          type: string
          format: date-time
          description: When the message was sent
          minLength: 20
          maxLength: 29
        forwardedMessageId:
          type: string
          description: ID of the original message if this is a forwarded message
          example: "msg789"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'

    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: The content of the message
          example: "Hello, world!"
          minLength: 1
          maxLength: 1000
          pattern: '^.*$'
        forwardedMessageId:
          type: string
          description: ID of the message being forwarded (if any)
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
      description: Request schema for sending a message

    AddCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: The content of the comment
          example: "Nice post!"
          minLength: 1
          maxLength: 500
          pattern: '^.*$'
      description: Request schema for adding a comment

    Comment:
      type: object
      description: A comment on a message
      properties:
        id:
          type: string
          description: Unique identifier of the comment
          example: "cmt123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        authorId:
          type: string
          description: ID of the user who wrote the comment
          example: "user789"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        content:
          type: string
          description: Content of the comment
          example: "Nice post!"
          minLength: 1
          maxLength: 500
          pattern: '^.*$'
        timestamp:
          type: string
          format: date-time
          description: When the comment was made
          minLength: 20
          maxLength: 29

    AddGroupMemberRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: ID of the user to add
          example: "user789"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
      description: Request schema for adding a group member

    GroupMember:
      type: object
      description: A member of a group
      properties:
        userId:
          type: string
          description: ID of the user
          example: "user123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        joinedAt:
          type: string
          format: date-time
          description: When the user joined the group
          minLength: 20
          maxLength: 29

    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
          description: New name of the group
          example: "New Group Name"
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_ ]+$'
      description: Request schema for updating group information

    Group:
      type: object
      description: Group schema
      properties:
        id:
          type: string
          description: Unique identifier of the group
          example: "group123"
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        name:
          type: string
          description: Name of the group
          example: "Group Chat"
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_ ]+$'
